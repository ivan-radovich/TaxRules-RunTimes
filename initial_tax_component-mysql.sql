CREATE TABLE TAX_DOCFISCALHIST
  (
    ID_HDOCFIS    INTEGER NOT NULL AUTO_INCREMENT,
    DESTINATARIO  NUMERIC(20,0) NOT NULL,
    EMITENTE      NUMERIC(20,0) NOT NULL,
    TRANSPORTADOR NUMERIC(20,0),
    CALCSITUACAO  VARCHAR(2),
    CANCELADO     VARCHAR(1),
    CDTIPO        VARCHAR(1) NOT NULL,
    DESCIR10      VARCHAR(1),
    DTEMISSAO DATE NOT NULL,
    DTES DATE NOT NULL,
    DTPAGTO DATE,
    EMITIDOPORFORNECEDOR           VARCHAR(1),
    GRAVAHISTORICO                 VARCHAR(1),
    ICMSSTCOMPBASECOFINS           VARCHAR(1),
    ICMSSTCOMPBASEPIS              VARCHAR(1),
    IDDOCFISCAL                    NUMERIC(19,0),
    LOCALCOLETA                    VARCHAR(14),
    MODELO                         NUMERIC(2,0),
    NATUREZAOPERACAO               VARCHAR(60),
    NUMERO                         NUMERIC(10,0) NOT NULL,
    QTPESOBRUTO                    NUMERIC(22,8),
    QTPESOLIQUIDO                  NUMERIC(22,8),
    REFERENCIA                     VARCHAR(44),
    SERIE                          VARCHAR(5) NOT NULL,
    TIPOFRETE                      VARCHAR(1),
    TIPOOPERACAO                   VARCHAR(1) NOT NULL,
    TIPOPAGTO                      NUMERIC(1,0),
    TPCALCULO                      VARCHAR(3),
    TPDOCFISCAL                    VARCHAR(2) NOT NULL,
    VALORDOCFISCAL                 NUMERIC(19,2),
    VLBASECOFINS                   NUMERIC(19,2),
    VLBASEICMS                     NUMERIC(19,2),
    VLBASEICMSST                   NUMERIC(19,2),
    VLBASEICMSSTE                  NUMERIC(19,2),
    VLBASEII                       NUMERIC(19,2),
    VLBASEIPI                      NUMERIC(19,2),
    VLBASEISS                      NUMERIC(19,2),
    VLBASEPIS                      NUMERIC(19,2),
    VLCOFINS                       NUMERIC(19,2),
    VLCOMISSAO                     NUMERIC(19,2),
    VLDESCONTO                     NUMERIC(19,2),
    VLFRETE                        NUMERIC(19,2),
    VLICMS                         NUMERIC(19,2),
    VLICMSST                       NUMERIC(19,2),
    VLICMSSTE                      NUMERIC(19,2),
    VLII                           NUMERIC(19,2),
    VLIPI                          NUMERIC(19,2),
    VLISS                          NUMERIC(19,2),
    VLODA                          NUMERIC(19,2),
    VLPENSAO                       NUMERIC(19,2),
    VLPIS                          NUMERIC(19,2),
    VLPRODUTOS                     NUMERIC(19,2),
    VLSEGURO                       NUMERIC(19,2),
    VLSERVICOS                     NUMERIC(19,2),
    DOCFISCALTESTE                 VARCHAR(1) NOT NULL,
    IT_CDCFOP                      VARCHAR(4),
    IT_CDCLASSIFICACAO             VARCHAR(1) NOT NULL,
    IT_CDCSTCOFINS                 VARCHAR(2),
    IT_CDCSTICMS                   VARCHAR(3),
    IT_CDCSTPIS                    VARCHAR(2),
    IT_CDITEMDOCFISCAL             NUMERIC(10,0) NOT NULL,
    IT_CDITEMDOCFISCALPAI          VARCHAR(10),
    IT_CFOPDEDUZIDO                VARCHAR(4),
    IT_CFOPDFORIGEM                VARCHAR(4),
    IT_CNPJEMITENTEORIGEM          VARCHAR(14),
    IT_DEDUZCFOP                   VARCHAR(1),
    IT_DEDUZCSTCOFINS              VARCHAR(1),
    IT_DEDUZCSTICMS                VARCHAR(1),
    IT_DEDUZCSTPIS                 VARCHAR(1),
    IT_DEDUZENCALIMBASEINSS        VARCHAR(1),
    IT_DEDUZENCTRANBASEINSS        VARCHAR(1),
    IT_DOCCMPMATINSS               VARCHAR(1),
    IT_DOCTOCOMPROVACAOEQUIPTOINSS VARCHAR(1),
    IT_DTDOCFISCALORIGEM DATE,
    IT_EQUIPAMENTODSCCNTINSS     VARCHAR(1),
    IT_EQUIPAMENTOPRVCNTINSS     VARCHAR(1),
    IT_EQUIPEMDFISCINSS          VARCHAR(1),
    IT_EQUIPTOINERENTEINSS       VARCHAR(1),
    IT_IDDOCFISCAL               NUMERIC(19,0),
    IT_IDITEMDOCFISCAL           NUMERIC(19,0),
    IT_INDLOCALISS               VARCHAR(1),
    IT_IPICOMPBASECOFINS         VARCHAR(1),
    IT_IPICOMPBASEPIS            VARCHAR(1),
    IT_IPICOMPOEBASEICMS         VARCHAR(1),
    IT_MATERIALDSCCNTINSS        VARCHAR(1),
    IT_MATERIALEMDOCTOFISCALINSS VARCHAR(1),
    IT_MATERIALPRVCNTINSS        VARCHAR(1),
    IT_NUMDOCFISCALORIGEM        NUMERIC(10,0),
    IT_POSSUIDOCUMENTACAOISS     VARCHAR(1),
    IT_PRATICAST                 VARCHAR(1),
    IT_PRATICASTE                VARCHAR(1),
    IT_PRODUTOSOBREGIMEST        VARCHAR(1),
    IT_QTAREA                    NUMERIC(22,8),
    IT_QTAREAUNIDADE             VARCHAR(10),
    IT_QTCOMPRIMENTO             NUMERIC(22,8),
    IT_QTCOMPRIMENTOUNIDADE      VARCHAR(10),
    IT_QTITEMDOCFISCAL           NUMERIC(22,8),
    IT_QTITEMDOCFISCALALT        NUMERIC(22,8),
    IT_QTITEMDOCFISCALALTUNIDADE VARCHAR(10),
    IT_QTPESOBRUTO               NUMERIC(22,8),
    IT_QTPESOLIQUIDO             NUMERIC(22,8),
    IT_QTPESOUNIDADE             VARCHAR(10),
    IT_QTTRIBUTARIA              NUMERIC(22,8),
    IT_QTTRIBUTARIAUNIDADE       VARCHAR(10),
    IT_QTVOLUME                  NUMERIC(22,8),
    IT_QTVOLUMEUNIDADE           VARCHAR(10),
    IT_RETEMCOFINS               VARCHAR(1),
    IT_RETEMCSLL                 VARCHAR(1),
    IT_RETEMINSSPJ               VARCHAR(1),
    IT_RETEMIR                   VARCHAR(1),
    IT_RETEMISS                  VARCHAR(1),
    IT_RETEMPIS                  VARCHAR(1),
    IT_RETEMSENAT                VARCHAR(1),
    IT_RETEMSEST                 VARCHAR(1),
    IT_SERIEDOCFISCALORIGEM      VARCHAR(5),
    IT_TOTALCONTEMCOFINS         VARCHAR(1),
    IT_TOTALCONTEMICMS           VARCHAR(1),
    IT_TOTALCONTEMPIS            VARCHAR(1),
    IT_UNIDADE                   VARCHAR(20),
    IT_VLBASEICMSSTRETIDO        NUMERIC(19,2),
    IT_VLCOMISSAO                NUMERIC(19,2),
    IT_VLDESCONTO                NUMERIC(19,2),
    IT_VLENCALIMENTACAO          NUMERIC(19,2),
    IT_VLENCTRANSPORTE           NUMERIC(19,2),
    IT_VLEQUIPAMENTOS            NUMERIC(19,2),
    IT_VLFRETE                   NUMERIC(19,2),
    IT_VLICMSSTRETIDO            NUMERIC(19,2),
    IT_VLINSSRETTERC             NUMERIC(19,2),
    IT_VLMATSERV                 NUMERIC(19,2),
    IT_VLODA                     NUMERIC(19,2),
    IT_VLOUTRASDEDUCOES          NUMERIC(19,2),
    IT_VLSEGURO                  NUMERIC(19,2),
    IT_VLSUBEMPREITADA           NUMERIC(19,2),
    IT_VLTOTAL                   NUMERIC(19,2) NOT NULL,
    IT_VLTOTALCI                 NUMERIC(19,2),
    IT_VLUNITARIO                NUMERIC(19,2),
    IT_VLUNITARIOCI              NUMERIC(19,2),
    IT_INDEFICIENCIAENERGETICA   VARCHAR(10),
    IT_INDRECICLAVEL             VARCHAR(10),
    PROD_APLICACAO               VARCHAR(1),
    PROD_CDORIGEM                VARCHAR(1),
    PROD_EAN                     VARCHAR(15),
    PROD_EXNCM                   VARCHAR(25),
    PROD_EXTEC                   VARCHAR(3),
    PROD_EXTIPI                  VARCHAR(3),
    PROD_FABRICACAO              VARCHAR(1),
    PROD_FINALIDADE              VARCHAR(2),
    PROD_GENERO                  NUMERIC(2,0),
    PROD_NBM                     VARCHAR(10),
    PROD_NCM                     VARCHAR(8),
    PROD_LISTAFARMACEUTICA       VARCHAR(3),
    PROD_LISTACMED               VARCHAR(1),
    PROD_CODIGO                  VARCHAR(15),
    PROD_DESCRICAO               VARCHAR(150),
    SERV_CDMUNICIPIO             VARCHAR(7),
    SERV_CDSERVICODESTINO        VARCHAR(15),
    SERV_CDSERVICOFEDERAL        VARCHAR(7),
    SERV_CDSERVICOLOCAL          VARCHAR(15),
    SERV_CDSERVICOMSAF           VARCHAR(15),
    SERV_CDSERVICOORIGEM         VARCHAR(15),
    SERV_CODIGO                  VARCHAR(15),
    SERV_DESCRICAO               VARCHAR(150),
    CP_GERAINC                   VARCHAR(1),
    CP_IMPOSTOSANAOCALCULAR      VARCHAR(100),
    CP_MDARRED                   VARCHAR(1),
    CP_NDECMVAAJ                 VARCHAR(1),
    CP_NDECRALIQ                 VARCHAR(1),
    CNPJCPFEMIT                  VARCHAR(14) NOT NULL,
    CNPJCPFDEST                  VARCHAR(14) NOT NULL,
    GRPEMIT                      VARCHAR(14) NOT NULL,
    GRPDEST                      VARCHAR(14) NOT NULL,
    FLAGTRIANG                   VARCHAR(1),
    PRIMARY KEY(ID_HDOCFIS)
  );

CREATE UNIQUE INDEX TAX_DOCFH_AK1 ON TAX_DOCFISCALHIST
  (
    EMITENTE, NUMERO, SERIE, IT_CDITEMDOCFISCAL
  );

CREATE INDEX TAX_DOCFH_INDEX1 ON TAX_DOCFISCALHIST
  (
    GRPEMIT,
    GRPDEST
  )
  ;
  
CREATE TABLE TAX_ENQHIST
  (
    ID_ENQH                  INTEGER NOT NULL AUTO_INCREMENT,
    ID_HDOCFIS               NUMERIC(20,0) NOT NULL,
    CDFISCALTRIBUTACAO       VARCHAR(10),
    CDITEM                   NUMERIC(10,0) NOT NULL,
    DSSIGLA                  VARCHAR(10) NOT NULL,
    IDITEMDOCFISCAL          NUMERIC(10,0),
    OBSERVACAOFISCAL         VARCHAR(200),
    PERCREDUCAOALIQUOTA      NUMERIC(7,4),
    PERCREDUCAOBASE          NUMERIC(7,4),
    SITUACAO                 VARCHAR(1),
    TPENQUADRAMENTO          VARCHAR(2) NOT NULL,
    VLALIQUOTA               NUMERIC(19,2),
    VLBASE                   NUMERIC(19,2),
    VLBASEUNITARIA           NUMERIC(19,2),
    VLBASEUNITARIAUNIDADE    VARCHAR(10),
    VLDESCONTODEPENDENTE     NUMERIC(19,2),
    VLIMPOSTO                NUMERIC(19,2),
    VLIMPOSTOUNITARIO        NUMERIC(19,2),
    VLIMPOSTOUNITARIOUNIDADE VARCHAR(10),
    VLISENTO                 NUMERIC(19,2),
    VLOUTROS                 NUMERIC(19,2),
    VLPERCENTUALMVA          NUMERIC(7,4),
    VLPRECOCONTROLADO        NUMERIC(19,2),
    VLRECUPERADO             NUMERIC(19,2),
    VLRECUPERAR              NUMERIC(19,2),
    VLREDUCAOIR              NUMERIC(19,2),
    VLTRIBUTAVEL             NUMERIC(19,2),
    PRIMARY KEY(ID_ENQH)
  )
  ;
CREATE UNIQUE INDEX TAX_ENQHIST_AK1 ON TAX_ENQHIST
  (
    ID_HDOCFIS, CDITEM, DSSIGLA
  )
  ;

CREATE TABLE TAX_ENQITHIST
  (
    ID_ENQITH       INTEGER NOT NULL AUTO_INCREMENT,
    ID_HDOCFIS      NUMERIC(20,0) NOT NULL,
    CDITEMDOCFISCAL NUMERIC(10,0) NOT NULL,
    CODIGO          VARCHAR(65),
    DESCRICAO       VARCHAR(500),
    IDITEMDOCFISCAL NUMERIC(19,0),
    IDREGRA         VARCHAR(10),
    STATUS          VARCHAR(500),
    TIPO            VARCHAR(2),
    PRIMARY KEY(ID_ENQITH)
  )
  ;
CREATE UNIQUE INDEX TAX_ENQITHIST_AK1 ON TAX_ENQITHIST
  (
    ID_HDOCFIS, CDITEMDOCFISCAL, IDREGRA
  )
  ;
  CREATE TABLE TAX_PESSOAHIST
  (
    ID_HPESSOAS                 INTEGER NOT NULL AUTO_INCREMENT,
    CDATIVIDADEECONOMICA        VARCHAR(400),
    REGTRIBDIFERENCIADO         VARCHAR(200),
    CDMUNICIPIO                 VARCHAR(7),
    CDPAIS                      VARCHAR(4) NOT NULL,
    CNPJ                        VARCHAR(14),
    CODIGO                      VARCHAR(15),
    CONTRIBUINTECOFINS          VARCHAR(1),
    CONTRIBUINTEICMS            VARCHAR(1),
    CONTRIBUINTEII              VARCHAR(1),
    CONTRIBUINTEIPI             VARCHAR(1),
    CONTRIBUINTEISS             VARCHAR(1),
    CONTRIBUINTEPIS             VARCHAR(1),
    CONTRIBUINTEST              VARCHAR(1),
    CPF                         VARCHAR(11),
    DEFICIENTEFISICO            VARCHAR(1),
    DISTMTITFAB                 VARCHAR(1),
    ENTIDADEUNIAO               VARCHAR(1),
    FAIXAFATURAMENTOANUAL       VARCHAR(1),
    INSCRICAOESTADUAL           VARCHAR(15),
    INSCRICAOMUNICIPAL          VARCHAR(15),
    NATUREZAJURIDICA            VARCHAR(10),
    NOME                        VARCHAR(250),
    PESSOAJURIDICA              VARCHAR(1) NOT NULL,
    PRODUTORRURAL               VARCHAR(1),
    PRODUTOSLISTANEGATIVA       VARCHAR(1),
    PRODUTOSLISTANEUTRA         VARCHAR(1),
    PRODUTOSLISTAPOSITIVA       VARCHAR(1),
    QTDEPENDENTES               NUMERIC(2,0),
    SIMPLESNAC                  VARCHAR(1),
    SOCUNIPROFISSIONAL          VARCHAR(1),
    SUBSTITUTOST                VARCHAR(1),
    TRATAMENTOESPECIALESTADUAL  VARCHAR(1),
    TRATAMENTOESPECIALFEDERAL   VARCHAR(1),
    TRATAMENTOESPECIALMUNICIPAL VARCHAR(1),
    UF                          VARCHAR(2),
    RETENCAOISSEMITENTE		  VARCHAR(1),
    PRIMARY KEY(ID_HPESSOAS)
  )
  ;
CREATE UNIQUE INDEX TAX_PESSOAHIST_AK1 ON TAX_PESSOAHIST
  (
    CNPJ, CPF
  )
  ;

CREATE TABLE TAX_REC_ST_ENTRADA
  (
    IDRECENTRADA INTEGER NOT NULL AUTO_INCREMENT,
    CNPJ_EMIT    VARCHAR(14) NOT NULL,
    CNPJ_DEST    VARCHAR(14) NOT NULL,
    DF_NUMERO    NUMERIC(10,0) NOT NULL,
    SERIE        VARCHAR(5) NOT NULL,
    DF_DATA DATE NOT NULL,
    COD_PRODUTO        VARCHAR(15) NOT NULL,
    QUANTIDADE         NUMERIC(22,8) NOT NULL,
    UNIDADE            VARCHAR(20) NOT NULL,
    VL_ITEM            NUMERIC(19,2) NOT NULL,
    VL_ICMS            NUMERIC(19,2) NOT NULL,
    VL_ICMSST          NUMERIC(19,2) NOT NULL,
    VL_ICMSSTE         NUMERIC(19,2) NOT NULL,
    VL_BASE_ICMS       NUMERIC(19,2) NOT NULL,
    VL_BASE_ICMSST     NUMERIC(19,2) NOT NULL,
    VL_BASE_ICMSSTE    NUMERIC(19,2) NOT NULL,
    QTD_RECUPERADA     NUMERIC(22,8) NOT NULL,
    CNPJEMITENTEICMS   VARCHAR(14),
    NUMDOCFISCALICMS   NUMERIC(10,0),
    SERIEDOCFISCALICMS VARCHAR(5),
    DTDOCFISCALICMS	 DATE,
    CD_ITEM			 VARCHAR(15) NOT NULL,
    PRIMARY KEY(IDRECENTRADA)
  )
  ;
CREATE UNIQUE INDEX TAX_REC_ST_ENTRADA_AK1 ON TAX_REC_ST_ENTRADA
  (
    CNPJ_EMIT, DF_NUMERO, SERIE, DF_DATA, CD_ITEM
  )
  ;
  
CREATE TABLE TAX_REC_ST_SAIDA
  (
    IDRECSAIDA INTEGER NOT NULL AUTO_INCREMENT,
    CNPJ_EMIT  VARCHAR(14) NOT NULL,
    CNPJ_DEST  VARCHAR(14) NOT NULL,
    DF_NUMERO  NUMERIC(10,0) NOT NULL,
    SERIE      VARCHAR(5) NOT NULL,
    DF_DATA DATE NOT NULL,
    COD_PRODUTO          VARCHAR(15) NOT NULL,
    CNPJ_EMIT_RECUPERADO VARCHAR(14) NOT NULL,
    DF_NUMERO_RECUPERADO NUMERIC(10,0) NOT NULL,
    SERIE_RECUPERADO     VARCHAR(5) NOT NULL,
    DF_DATA_RECUPERADO DATE NOT NULL,
    QUANTIDADE           NUMERIC(22,8) NOT NULL,
    QUANTIDADE_DEV       NUMERIC(22,8) NOT NULL,
    UNIDADE              VARCHAR(20) NOT NULL,
    VL_RECUPERADO_ICMS   NUMERIC(19,2) NOT NULL,
    VL_RECUPERADO_ICMSST NUMERIC(19,2) NOT NULL,
    VL_RECUPERADO_ICMSSTE NUMERIC(19,2) NOT NULL,
    IDRECENTRADA         NUMERIC(20,0) NOT NULL,
    CNPJ_EMIT_DEV        VARCHAR(14),
    DF_NUMERO_DEV        NUMERIC(10,0),
    SERIE_DEV            VARCHAR(5),
    DF_DATA_DEV DATE,
    TIPO VARCHAR(1) NOT NULL,
    CD_ITEM				 VARCHAR(15) NOT NULL,
    NF_STATUS   VARCHAR(100),
    PRIMARY KEY(IDRECSAIDA)
  )
  ;
CREATE INDEX TAX_REC_ST_SAIDA_INDX1 ON TAX_REC_ST_SAIDA
  (
    IDRECENTRADA
  )
  ;

CREATE TABLE cond_conseq_variables (
  id decimal(11) NOT NULL,
  alias varchar(255) DEFAULT NULL,
  title varchar(255) DEFAULT NULL,
  description varchar(255) DEFAULT NULL,
  created_at date DEFAULT NULL,
  updated_at date DEFAULT NULL,
  expression varchar(255) DEFAULT NULL,
  use_for varchar(255)  DEFAULT NULL,
  PRIMARY KEY (id)
);




CREATE TABLE cond_conseq_operators (
  id decimal(11) NOT NULL,
  op_sign varchar(255) NOT NULL,
  description varchar(255) DEFAULT NULL,
  created_at date DEFAULT NULL,
  updated_at date DEFAULT NULL,
  op_value int NOT NULL,
  PRIMARY KEY (id)
);


INSERT INTO cond_conseq_operators VALUES (1, '=', '', sysdate(), sysdate(), 10);
INSERT INTO cond_conseq_operators VALUES (2, '<>', '', sysdate(), sysdate(), 20);
INSERT INTO cond_conseq_operators VALUES (3, 'in', '', sysdate(), sysdate(), 30);
INSERT INTO cond_conseq_operators VALUES (4, 'not in', '', sysdate(), sysdate(), 40);
INSERT INTO cond_conseq_operators VALUES (5, '>', '', sysdate(), sysdate(), 110);
INSERT INTO cond_conseq_operators VALUES (6, '<', '', sysdate(), sysdate(), 130);
INSERT INTO cond_conseq_operators VALUES (7, '>=', '', sysdate(), sysdate(), 140);
INSERT INTO cond_conseq_operators VALUES (8, '<=', '', sysdate(), sysdate(), 150);

commit;

CREATE TABLE TAX_REC_ST_MEDIA (
  IDRECMEDIA int(11) NOT NULL AUTO_INCREMENT,
  DT_INICIO date NOT NULL,
  COD_PRODUTO varchar(15) NOT NULL,
  CNPJ_DEST varchar(14) NOT NULL,
  QT_ITENS_SALDO decimal(10,3) NOT NULL,
  VL_ICMS_SALDO decimal(19,2) NOT NULL,
  VL_ICMSST_SALDO decimal(19,2) NOT NULL,
  VL_ICMSSTE_SALDO decimal(19,2) NOT NULL,
  PRIMARY KEY (IDRECMEDIA)
);

CREATE UNIQUE INDEX TAX_REC_ST_MEDIA_IDX1 ON TAX_REC_ST_MEDIA(COD_PRODUTO, CNPJ_DEST);

-- 57.4 -> 20151216_create_schema_versions.sql
CREATE TABLE SCHEMA_VERSIONS (
  SCRIPT_FILENAME varchar(100) NOT NULL,
  CODE_RELEASE_NUMBER varchar(30) NOT NULL,
  RUN_DATE timestamp NOT NULL,
  PRIMARY KEY (SCRIPT_FILENAME)
);

INSERT INTO SCHEMA_VERSIONS VALUES ('20151216_create_schema_versions.sql', 'tax_component V57.4', sysdate());

-- 57.12 -> 20160627_create_table_TAX_REC_ST_ENTRADA_COMPL.sql
CREATE TABLE TAX_REC_ST_ENTRADA_COMPL
  (
    IDRECENTRADACOMPL INTEGER NOT NULL AUTO_INCREMENT,
    DF_NUMERO    NUMERIC(10,0) NOT NULL,
    SERIE        VARCHAR(5) NOT NULL,
    DF_DATA DATE NOT NULL,
    VL_ICMS            NUMERIC(19,2) NOT NULL,
    VL_ICMSST          NUMERIC(19,2) NOT NULL,
    VL_ICMSSTE         NUMERIC(19,2) NOT NULL,
    VL_BASE_ICMS       NUMERIC(19,2) NOT NULL,
    VL_BASE_ICMSST     NUMERIC(19,2) NOT NULL,
    VL_BASE_ICMSSTE    NUMERIC(19,2) NOT NULL,
    IDRECENTRADA       INTEGER NOT NULL,
    PRIMARY KEY(IDRECENTRADACOMPL),
    FOREIGN KEY (IDRECENTRADA) REFERENCES TAX_REC_ST_ENTRADA(IDRECENTRADA)
  );
  
INSERT INTO SCHEMA_VERSIONS VALUES ('20160627_create_table_TAX_REC_ST_ENTRADA_COMPL.sql', 'tax_component V57.12', sysdate());

-- 59.1 -> 20161123_update_table_TAX_ENQHIST.sql
ALTER TABLE TAX_ENQHIST ADD SITUACAOESPECIAL VARCHAR(255);

INSERT INTO SCHEMA_VERSIONS VALUES ('20161123_update_table_TAX_ENQHIST.sql', 'tax_component V60.0', sysdate());

-- 59.1 -> 20161125_change_CD_ITEM_length.sql
ALTER TABLE TAX_REC_ST_ENTRADA MODIFY CD_ITEM VARCHAR(35); 
ALTER TABLE TAX_REC_ST_SAIDA MODIFY CD_ITEM VARCHAR(35);

INSERT INTO SCHEMA_VERSIONS VALUES ('20161125_change_CD_ITEM_length.sql', 'tax_component V59.1', sysdate());

-- 59.11 -> 20170306_no_negative_st_avg_values.sql
delimiter $$
DROP TRIGGER IF EXISTS TRG_NO_NEGATIVE_ST_AVG_INS;

CREATE TRIGGER TRG_NO_NEGATIVE_ST_AVG_INS
BEFORE INSERT ON TAX_REC_ST_MEDIA
FOR EACH ROW
BEGIN
  IF(NEW.QT_ITENS_SALDO < 0 OR 
     NEW.VL_ICMS_SALDO < 0 OR 
     NEW.VL_ICMSST_SALDO < 0 OR 
     NEW.VL_ICMSSTE_SALDO < 0) THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Colunas QT_ITENS_SALDO, VL_ICMS_SALDO, VL_ICMSST_SALDO e VL_ICMSSTE_SALDO não podem ter valores negativos.';
  END IF;
END $$
delimiter ;

delimiter $$
DROP TRIGGER IF EXISTS TRG_NO_NEGATIVE_ST_AVG_UPD;

CREATE TRIGGER TRG_NO_NEGATIVE_ST_AVG_UPD
BEFORE UPDATE ON TAX_REC_ST_MEDIA
FOR EACH ROW
BEGIN
  IF(NEW.QT_ITENS_SALDO < 0 OR 
     NEW.VL_ICMS_SALDO < 0 OR 
     NEW.VL_ICMSST_SALDO < 0 OR 
     NEW.VL_ICMSSTE_SALDO < 0) THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Colunas QT_ITENS_SALDO, VL_ICMS_SALDO, VL_ICMSST_SALDO e VL_ICMSSTE_SALDO não podem ter valores negativos.';
  END IF;
END $$
delimiter ;

INSERT INTO SCHEMA_VERSIONS VALUES ('20170306_no_negative_st_avg_values.sql', 'tax_component V59.11', sysdate());

-- 20170609_update_table_TAX_REC_ST_ENTRADA.sql

ALTER TABLE TAX_REC_ST_ENTRADA ADD VL_FCP_ICMS NUMERIC(19,2);
ALTER TABLE TAX_REC_ST_ENTRADA ADD VL_FCP_ICMSST NUMERIC(19,2);
ALTER TABLE TAX_REC_ST_ENTRADA ADD VL_FCP_ICMSSTE NUMERIC(19,2);
ALTER TABLE TAX_REC_ST_ENTRADA ADD VL_BASE_FCP_ICMS NUMERIC(19,2);
ALTER TABLE TAX_REC_ST_ENTRADA ADD VL_BASE_FCP_ICMSST NUMERIC(19,2);
ALTER TABLE TAX_REC_ST_ENTRADA ADD VL_BASE_FCP_ICMSSTE NUMERIC(19,2);

INSERT INTO SCHEMA_VERSIONS VALUES ('20170609_update_table_TAX_REC_ST_ENTRADA.sql', '--', sysdate());

-- 20170609_update_table_TAX_REC_ST_ENTRADA_COMPL.sql

ALTER TABLE TAX_REC_ST_ENTRADA_COMPL ADD VL_FCP_ICMS NUMERIC(19,2);
ALTER TABLE TAX_REC_ST_ENTRADA_COMPL ADD VL_FCP_ICMSST NUMERIC(19,2);
ALTER TABLE TAX_REC_ST_ENTRADA_COMPL ADD VL_FCP_ICMSSTE NUMERIC(19,2);
ALTER TABLE TAX_REC_ST_ENTRADA_COMPL ADD VL_BASE_FCP_ICMS NUMERIC(19,2);
ALTER TABLE TAX_REC_ST_ENTRADA_COMPL ADD VL_BASE_FCP_ICMSST NUMERIC(19,2);
ALTER TABLE TAX_REC_ST_ENTRADA_COMPL ADD VL_BASE_FCP_ICMSSTE NUMERIC(19,2);

INSERT INTO SCHEMA_VERSIONS VALUES ('20170609_update_table_TAX_REC_ST_ENTRADA_COMPL.sql', '--', sysdate());

-- 20170609_update_table_TAX_REC_ST_MEDIA.sql

ALTER TABLE TAX_REC_ST_MEDIA ADD VL_FCP_ICMS_SALDO NUMERIC(19,2);
ALTER TABLE TAX_REC_ST_MEDIA ADD VL_FCP_ICMSST_SALDO NUMERIC(19,2);
ALTER TABLE TAX_REC_ST_MEDIA ADD VL_FCP_ICMSSTE_SALDO NUMERIC(19,2);

INSERT INTO SCHEMA_VERSIONS VALUES ('20170609_update_table_TAX_REC_ST_MEDIA.sql', '--', sysdate());

-- 20170609_update_table_TAX_REC_ST_SAIDA.sql

ALTER TABLE TAX_REC_ST_SAIDA ADD VL_RECUPERADO_FCP_ICMS NUMERIC(19,2);
ALTER TABLE TAX_REC_ST_SAIDA ADD VL_RECUPERADO_FCP_ICMSST NUMERIC(19,2);
ALTER TABLE TAX_REC_ST_SAIDA ADD VL_RECUPERADO_FCP_ICMSSTE NUMERIC(19,2);

INSERT INTO SCHEMA_VERSIONS VALUES ('20170609_update_table_TAX_REC_ST_SAIDA.sql', '--', sysdate());

-- 20170726_update_ex_ncm_size.sql

ALTER TABLE TAX_DOCFISCALHIST MODIFY PROD_EXNCM VARCHAR(51);

INSERT INTO SCHEMA_VERSIONS VALUES ('20170726_update_ex_ncm_size.sql', '--', sysdate());

-- 20170829_alter_table_TAX_ENQITHIST_codigo.sql

ALTER TABLE TAX_ENQITHIST MODIFY CODIGO VARCHAR(255);

INSERT INTO SCHEMA_VERSIONS VALUES ('20170829_alter_table_TAX_ENQITHIST_codigo.sql', '--', sysdate());

-- 20171018_alter_table_ENTRADA_SAIDA_ck_zero.sql
-- TAXRULES#8470 Saldos de ST negativos na tabela TAX_REC_ST_ENTRADA
create table TAX_REC_ST_ENTRADA_BKP8470 as select * from TAX_REC_ST_ENTRADA;

update TAX_REC_ST_ENTRADA 
   set QUANTIDADE = 0
     , VL_ITEM = 0
     , VL_ICMS = 0
     , VL_ICMSST = 0
     , VL_ICMSSTE = 0
     , VL_BASE_ICMS = 0
     , VL_BASE_ICMSST = 0
     , VL_BASE_ICMSSTE = 0
     , QTD_RECUPERADA = 0
 where ifnull(QUANTIDADE,0) < 0
    or ifnull(VL_ITEM,0) < 0
    or ifnull(VL_ICMS,0) < 0
    or ifnull(VL_ICMSST,0) < 0
    or ifnull(VL_ICMSSTE,0) < 0
    or ifnull(VL_BASE_ICMS,0) < 0
    or ifnull(VL_BASE_ICMSST,0) < 0
    or ifnull(VL_BASE_ICMSSTE,0) < 0
    or ifnull(QTD_RECUPERADA,0) < 0;

commit;

delimiter $$
DROP TRIGGER IF EXISTS TRG_NO_NEGATIVE_TRSE_INS;

CREATE TRIGGER TRG_NO_NEGATIVE_TRSE_INS
BEFORE INSERT ON TAX_REC_ST_ENTRADA
FOR EACH ROW
BEGIN
  IF (NEW.QUANTIDADE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QUANTIDADE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_ITEM < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ITEM não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMS não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF; 
  IF (NEW.VL_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_ICMS não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.QTD_RECUPERADA < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QTD_RECUPERADA não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
END $$
delimiter ;

delimiter $$
DROP TRIGGER IF EXISTS TRG_NO_NEGATIVE_TRSE_UPD;

CREATE TRIGGER TRG_NO_NEGATIVE_TRSE_UPD
BEFORE UPDATE ON TAX_REC_ST_ENTRADA
FOR EACH ROW
BEGIN
  IF (NEW.QUANTIDADE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QUANTIDADE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_ITEM < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ITEM não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMS não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF; 
  IF (NEW.VL_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_ICMS não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.QTD_RECUPERADA < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QTD_RECUPERADA não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
END $$
delimiter ;

create table TAX_REC_ST_SAIDA_BKP8470 as select * from TAX_REC_ST_SAIDA;

update TAX_REC_ST_SAIDA
   set QUANTIDADE = 0
     , QUANTIDADE_DEV = 0
     , VL_RECUPERADO_ICMS = 0
     , VL_RECUPERADO_ICMSST = 0
     , VL_RECUPERADO_ICMSSTE = 0
 WHERE ifnull(QUANTIDADE,0) < 0
    or ifnull(QUANTIDADE_DEV,0) < 0
    or ifnull(VL_RECUPERADO_ICMS,0) < 0
    or ifnull(VL_RECUPERADO_ICMSST,0) < 0
    or ifnull(VL_RECUPERADO_ICMSSTE,0) < 0;

commit;

delimiter $$
DROP TRIGGER IF EXISTS TRG_NO_NEGATIVE_TRSS_INS;

CREATE TRIGGER TRG_NO_NEGATIVE_TRSS_INS
BEFORE INSERT ON TAX_REC_ST_SAIDA
FOR EACH ROW
BEGIN
  IF (NEW.QUANTIDADE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QUANTIDADE não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.QUANTIDADE_DEV < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QUANTIDADE_DEV não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.VL_RECUPERADO_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_ICMS não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF; 
  IF (NEW.VL_RECUPERADO_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.VL_RECUPERADO_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
END $$
delimiter ;

delimiter $$
DROP TRIGGER IF EXISTS TRG_NO_NEGATIVE_TRSS_UPD;

CREATE TRIGGER TRG_NO_NEGATIVE_TRSS_UPD
BEFORE UPDATE ON TAX_REC_ST_SAIDA
FOR EACH ROW
BEGIN
  IF (NEW.QUANTIDADE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QUANTIDADE não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.QUANTIDADE_DEV < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QUANTIDADE_DEV não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.VL_RECUPERADO_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_ICMS não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF; 
  IF (NEW.VL_RECUPERADO_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.VL_RECUPERADO_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
END $$
delimiter ;

insert into SCHEMA_VERSIONS values ('20171018_alter_table_ENTRADA_SAIDA_ck_zero.sql', '--', sysdate());

-- 20171019_alter_table_ENTRADA_SAIDA_MEDIA_ck_zero_fcp.sql
-- TAXRULES#8470 Saldos de ST negativos nas tabelas nao podem acontecer
create table TAX_REC_ST_ENTRADA_BKP7677 as select * from TAX_REC_ST_ENTRADA;

update TAX_REC_ST_ENTRADA set VL_FCP_ICMS = 0 where VL_FCP_ICMS is null;
update TAX_REC_ST_ENTRADA set VL_FCP_ICMSST = 0 where VL_FCP_ICMSST is null;
update TAX_REC_ST_ENTRADA set VL_FCP_ICMSSTE = 0 where VL_FCP_ICMSSTE is null;
update TAX_REC_ST_ENTRADA set VL_BASE_FCP_ICMS = 0 where VL_BASE_FCP_ICMS is null;
update TAX_REC_ST_ENTRADA set VL_BASE_FCP_ICMSST = 0 where VL_BASE_FCP_ICMSST is null;
update TAX_REC_ST_ENTRADA set VL_BASE_FCP_ICMSSTE = 0 where VL_BASE_FCP_ICMSSTE is null;

update TAX_REC_ST_ENTRADA 
   set VL_FCP_ICMS = 0
     , VL_FCP_ICMSST = 0
     , VL_FCP_ICMSSTE = 0
     , VL_BASE_FCP_ICMS = 0
     , VL_BASE_FCP_ICMSST = 0
     , VL_BASE_FCP_ICMSSTE = 0
 where VL_FCP_ICMS < 0
    or VL_FCP_ICMSST < 0
    or VL_FCP_ICMSSTE < 0
    or VL_BASE_FCP_ICMS < 0
    or VL_BASE_FCP_ICMSST < 0
    or VL_BASE_FCP_ICMSSTE < 0;

commit;

delimiter $$
DROP TRIGGER IF EXISTS TRG_NO_NEGATIVE_TRSE_INS;

CREATE TRIGGER TRG_NO_NEGATIVE_TRSE_INS
BEFORE INSERT ON TAX_REC_ST_ENTRADA
FOR EACH ROW
BEGIN
  IF (NEW.QUANTIDADE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QUANTIDADE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_ITEM < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ITEM não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMS não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF; 
  IF (NEW.VL_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_ICMS não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.QTD_RECUPERADA < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QTD_RECUPERADA não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_FCP_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_FCP_ICMS não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_FCP_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_FCP_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_FCP_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_FCP_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_FCP_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_FCP_ICMS não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_FCP_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_FCP_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_FCP_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_FCP_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;  
END $$
delimiter ;

delimiter $$
DROP TRIGGER IF EXISTS TRG_NO_NEGATIVE_TRSE_UPD;

CREATE TRIGGER TRG_NO_NEGATIVE_TRSE_UPD
BEFORE UPDATE ON TAX_REC_ST_ENTRADA
FOR EACH ROW
BEGIN
  IF (NEW.QUANTIDADE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QUANTIDADE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_ITEM < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ITEM não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMS não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF; 
  IF (NEW.VL_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_ICMS não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.QTD_RECUPERADA < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QTD_RECUPERADA não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_FCP_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_FCP_ICMS não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_FCP_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_FCP_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_FCP_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_FCP_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_FCP_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_FCP_ICMS não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_FCP_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_FCP_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;
  IF (NEW.VL_BASE_FCP_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_BASE_FCP_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_ENTRADA.'; END IF;    
END $$
delimiter ;

ALTER TABLE TAX_REC_ST_ENTRADA MODIFY VL_FCP_ICMS NUMERIC(19,2) NOT NULL;
ALTER TABLE TAX_REC_ST_ENTRADA MODIFY VL_FCP_ICMSST NUMERIC(19,2) NOT NULL;
ALTER TABLE TAX_REC_ST_ENTRADA MODIFY VL_FCP_ICMSSTE NUMERIC(19,2) NOT NULL;
ALTER TABLE TAX_REC_ST_ENTRADA MODIFY VL_BASE_FCP_ICMS NUMERIC(19,2) NOT NULL;
ALTER TABLE TAX_REC_ST_ENTRADA MODIFY VL_BASE_FCP_ICMSST NUMERIC(19,2) NOT NULL;
ALTER TABLE TAX_REC_ST_ENTRADA MODIFY VL_BASE_FCP_ICMSSTE NUMERIC(19,2) NOT NULL;

create table TAX_REC_ST_SAIDA_BKP7677 as select * from TAX_REC_ST_SAIDA;

update TAX_REC_ST_SAIDA set VL_RECUPERADO_FCP_ICMS = 0 where VL_RECUPERADO_FCP_ICMS is null;
update TAX_REC_ST_SAIDA set VL_RECUPERADO_FCP_ICMSST = 0 where VL_RECUPERADO_FCP_ICMSST is null;
update TAX_REC_ST_SAIDA set VL_RECUPERADO_FCP_ICMSSTE = 0 where VL_RECUPERADO_FCP_ICMSSTE is null;

update TAX_REC_ST_SAIDA
   set VL_RECUPERADO_FCP_ICMS = 0
     , VL_RECUPERADO_FCP_ICMSST = 0
     , VL_RECUPERADO_FCP_ICMSSTE = 0
 WHERE VL_RECUPERADO_FCP_ICMS < 0
    or VL_RECUPERADO_FCP_ICMSST < 0
    or VL_RECUPERADO_FCP_ICMSSTE < 0;

commit;

delimiter $$
DROP TRIGGER IF EXISTS TRG_NO_NEGATIVE_TRSS_INS;

CREATE TRIGGER TRG_NO_NEGATIVE_TRSS_INS
BEFORE INSERT ON TAX_REC_ST_SAIDA
FOR EACH ROW
BEGIN
  IF (NEW.QUANTIDADE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QUANTIDADE não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.QUANTIDADE_DEV < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QUANTIDADE_DEV não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.VL_RECUPERADO_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_ICMS não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF; 
  IF (NEW.VL_RECUPERADO_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.VL_RECUPERADO_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.VL_RECUPERADO_FCP_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_FCP_ICMS não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF; 
  IF (NEW.VL_RECUPERADO_FCP_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_FCP_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.VL_RECUPERADO_FCP_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_FCP_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
END $$
delimiter ;

delimiter $$
DROP TRIGGER IF EXISTS TRG_NO_NEGATIVE_TRSS_UPD;

CREATE TRIGGER TRG_NO_NEGATIVE_TRSS_UPD
BEFORE UPDATE ON TAX_REC_ST_SAIDA
FOR EACH ROW
BEGIN
  IF (NEW.QUANTIDADE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QUANTIDADE não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.QUANTIDADE_DEV < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QUANTIDADE_DEV não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.VL_RECUPERADO_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_ICMS não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF; 
  IF (NEW.VL_RECUPERADO_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.VL_RECUPERADO_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.VL_RECUPERADO_FCP_ICMS < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_FCP_ICMS não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF; 
  IF (NEW.VL_RECUPERADO_FCP_ICMSST < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_FCP_ICMSST não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;
  IF (NEW.VL_RECUPERADO_FCP_ICMSSTE < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_RECUPERADO_FCP_ICMSSTE não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;    
END $$
delimiter ;

ALTER TABLE TAX_REC_ST_SAIDA MODIFY VL_RECUPERADO_FCP_ICMS NUMERIC(19,2) NOT NULL;
ALTER TABLE TAX_REC_ST_SAIDA MODIFY VL_RECUPERADO_FCP_ICMSST NUMERIC(19,2) NOT NULL;
ALTER TABLE TAX_REC_ST_SAIDA MODIFY VL_RECUPERADO_FCP_ICMSSTE NUMERIC(19,2) NOT NULL;

create table TAX_REC_ST_MEDIA_BKP7677 as select * from TAX_REC_ST_MEDIA;

update TAX_REC_ST_MEDIA set VL_FCP_ICMS_SALDO = 0 where VL_FCP_ICMS_SALDO is null;
update TAX_REC_ST_MEDIA set VL_FCP_ICMSST_SALDO = 0 where VL_FCP_ICMSST_SALDO is null;
update TAX_REC_ST_MEDIA set VL_FCP_ICMSSTE_SALDO = 0 where VL_FCP_ICMSSTE_SALDO is null;

update TAX_REC_ST_MEDIA
   set VL_FCP_ICMS_SALDO = 0
     , VL_FCP_ICMSST_SALDO = 0
     , VL_FCP_ICMSSTE_SALDO = 0
 WHERE VL_FCP_ICMS_SALDO < 0
    or VL_FCP_ICMSST_SALDO < 0
    or VL_FCP_ICMSSTE_SALDO < 0;

commit;

delimiter $$
DROP TRIGGER IF EXISTS TRG_NO_NEGATIVE_ST_AVG_INS;

CREATE TRIGGER TRG_NO_NEGATIVE_ST_AVG_INS
BEFORE INSERT ON TAX_REC_ST_MEDIA
FOR EACH ROW
BEGIN
  IF (NEW.QT_ITENS_SALDO < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QT_ITENS_SALDO não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
  IF (NEW.VL_ICMS_SALDO < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMS_SALDO não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
  IF (NEW.VL_ICMSST_SALDO < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMSST_SALDO não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
  IF (NEW.VL_ICMSSTE_SALDO < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMSSTE_SALDO não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
  IF (NEW.VL_FCP_ICMS_SALDO < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_FCP_ICMS_SALDO não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
  IF (NEW.VL_FCP_ICMSST_SALDO < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_FCP_ICMSST_SALDO não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
  IF (NEW.VL_FCP_ICMSSTE_SALDO < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_FCP_ICMSSTE_SALDO não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
END $$
delimiter ;

delimiter $$
DROP TRIGGER IF EXISTS TRG_NO_NEGATIVE_ST_AVG_UPD;

CREATE TRIGGER TRG_NO_NEGATIVE_ST_AVG_UPD
BEFORE UPDATE ON TAX_REC_ST_MEDIA
FOR EACH ROW
BEGIN
  IF (NEW.QT_ITENS_SALDO < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna QT_ITENS_SALDO não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
  IF (NEW.VL_ICMS_SALDO < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMS_SALDO não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
  IF (NEW.VL_ICMSST_SALDO < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMSST_SALDO não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
  IF (NEW.VL_ICMSSTE_SALDO < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_ICMSSTE_SALDO não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
  IF (NEW.VL_FCP_ICMS_SALDO < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_FCP_ICMS_SALDO não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
  IF (NEW.VL_FCP_ICMSST_SALDO < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_FCP_ICMSST_SALDO não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
  IF (NEW.VL_FCP_ICMSSTE_SALDO < 0) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Coluna VL_FCP_ICMSSTE_SALDO não pode ter valor negativo na tabela TAX_REC_ST_SAIDA.'; END IF;  
END $$
delimiter ;

ALTER TABLE TAX_REC_ST_MEDIA MODIFY VL_FCP_ICMS_SALDO NUMERIC(19,2) NOT NULL;
ALTER TABLE TAX_REC_ST_MEDIA MODIFY VL_FCP_ICMSST_SALDO NUMERIC(19,2) NOT NULL;
ALTER TABLE TAX_REC_ST_MEDIA MODIFY VL_FCP_ICMSSTE_SALDO NUMERIC(19,2) NOT NULL;

insert into SCHEMA_VERSIONS values ('20171019_alter_table_ENTRADA_SAIDA_MEDIA_ck_zero_fcp.sql', '--', sysdate());

-- 20171227_alter_table_TAX_ENQHIST_observacaofiscal.sql

ALTER TABLE TAX_ENQHIST MODIFY OBSERVACAOFISCAL text;
INSERT INTO SCHEMA_VERSIONS VALUES ('20171227_alter_table_TAX_ENQHIST_observacaofiscal.sql', '--', sysdate());

-- 20171227_alter_table_TAX_ENQITHIST_descricao.sql

ALTER TABLE TAX_ENQITHIST MODIFY DESCRICAO text;
INSERT INTO SCHEMA_VERSIONS VALUES ('20171227_alter_table_TAX_ENQITHIST_descricao.sql', '--', sysdate());
